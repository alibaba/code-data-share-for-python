name: Build and Upload Python Package

on:
  release:
    types: [ published ]

jobs:
  build_sdist:
    name: Build sdist
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Install nox
        run: python -m pip install nox
      - name: Build sdist
        run: nox -s build_sdist

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist/*.tar.gz
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, macOS-10.15 ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.5.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist/*.whl
  publish:
    name: Publish
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Upload wheels to Github release
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            
            // GITHUB_REF would be refs/tags/<tag_name>
            const tag = process.env.GITHUB_REF.split("/").pop();

            console.log('environment', process.versions);
            console.log({ owner, repo, sha });

            const release = await github.repos.getReleaseByTag({ owner, repo, tag });

            console.log('get release', { release });

            for (let file of await fs.readdir('dist')) {
              console.log('uploading', file);
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
            }

      - name: Publish package to PyPI
        # Upload to PyPI for a stable release
        if: ${{ github.event.release.prerelease == false }}
        env:
          IS_DEV: ${{ github.repository_owner != 'alibaba' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          # env is a string
          repository_url: ${{ env.IS_DEV == 'true' && 'https://test.pypi.org/legacy/' || '' }}
          skip_existing: ${{ env.IS_DEV }}
          verbose: ${{ env.IS_DEV }}
